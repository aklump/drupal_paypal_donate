<?php
// $Id: paypal_donate.module 194 2010-11-30 01:44:54Z aklump $ 

/** 
* @file 
* Base module file for paypal_donate
*/

/**
 * Implementation of hook_enable()
 */
function paypal_donate_enable() {
  //message about module settings
  drupal_set_message(t('You may adjust settings for PayPal Donate by visiting <a href="/@url">@url</a>.', array('@url' => 'admin/settings/paypal_donate')));
  drupal_set_message(t('Make sure you assign donation privelages to one or more roles <a href="/@url">@url</a>.', array('@url' => 'admin/user/permissions')));

  //make a note of who enabled it
  global $user;
  watchdog('paypal_donate', 'paypal_donate module enabled by %user (uid: %uid)', array('%user' => $user->name, '%uid' => $user->uid));
}

/**
 * Implementation of hook_disable()
 */
function paypal_donate_disable() {
  //make a note of who disabled it
  global $user;
  watchdog('paypal_donate', 'paypal_donate module disabled by %user (uid: %uid)', array('%user' => $user->name, '%uid' => $user->uid));
}

/*
 * The uninstall hook will fire when the module gets uninstalled.
 */
function paypal_donate_uninstall() {

  //Clean up our entries in the variables table.
  $result = db_query("SELECT name FROM {variable} WHERE `name` LIKE 'paypal_donate%'");
  while ($data = db_fetch_object($result)) {
    variable_del($data->name);
  }
  
  //delete blocks
  db_query("DELETE FROM {blocks} WHERE `module` = 'paypal_donate'");
}

/**
 * Implementation of hook_help()
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function paypal_donate_help($path, $arg) {
  switch ($path) {
    case 'admin/help#paypal_donate':
      
      // Return a line-break version of the module README
      return filter_filter('process', 1, NULL, file_get_contents(dirname(__FILE__) ."/README.txt"));

    case 'admin/settings/paypal_donate':
      return t('After you submit this form, one or more blocks will be created that you can use anywhere on your website.  Go to !link to configure your blocks. You are strongly encouraged to make a donation to yourself, fully testing this system, before you open this to the world!', array('!link' => l('Blocks', 'admin/build/block/list')));

  }
}

/**
 * Implementation of hook_init()
 */
function paypal_donate_init() {
  $path = drupal_get_path('module', 'paypal_donate');
  drupal_add_css($path .'/paypal_donate.css');
  drupal_add_js($path .'/paypal_donate.js');
}

/**
 * Implementation of hook_perm()
 */
function paypal_donate_perm() {
  return array(
    'administer paypal donate',
    'make donations',
  );
}

/**
 * Implementation of hook_menu()
 */
function paypal_donate_menu() {
  $items = array();
  $items['admin/settings/paypal_donate'] = array(
    'title' => 'PayPal Donate Settings',
    'description' => t('Configure your site for PayPal donations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paypal_donate_admin_settings'),
    'access arguments' => array('administer paypal donate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'paypal_donate.admin.inc',
  );
  $items['paypal-donate/donate/%/%'] = array(
    'title' => 'Force a donation',
    'page callback' => 'paypal_donate_paypal_force',
    'page arguments' => array(2,3),
    'access arguments' => array('make donations'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block()
 */
function paypal_donate_block($op='list', $delta=0) {
  switch ($op) {
    case 'list':
      $blocks = array();
      for ($i = 1; $i <= (int)variable_get('paypal_donate_total_blocks', 1); ++$i) {
        $blocks[$i]['info'] = t('PayPal Donate: Block #'. $i);
        $blocks[$i]['cache'] = BLOCK_CACHE;        
      }
      return $blocks;
    
    case 'view':
      $block = array();
      
      //don't generate if no perms or business is missing
      if (user_access('make donations') && variable_get('paypal_donate_paypal_account_'. $delta, NULL)) {
        $block['subject'] = t('Make a Donation');
        $block['content'] = theme('paypal_donate_block', $delta);        
      }
      return $block;
  }
}

/**
 * Implementation of hook_theme
 */
function paypal_donate_theme($existing, $type, $theme, $path) {
  return array(
    'paypal_donate_block' => array(
      'arguments' => array('delta' => NULL),
    ),
  );
}

/**
 * Formats PayPal Donatation block.
 *
 * @ingroup themeable
 */
function theme_paypal_donate_block($delta) {
  $output = '';
  
  $output .= '<a name="paypal-donate-'. $delta .'"></a>'."\n";

  //donation message
  $output .= '<p class="donate-message">';
  $output .= check_markup(variable_get('paypal_donate_message_'. $delta, ''));
  $output .= '</p><!--donate-message-->';
  
  //we have data to create a block with
  foreach (array_keys(_paypal_donate_get_button_amounts($delta)) as $button_id) {
    $output .= drupal_get_form('paypal_donate_paypal_form_'. $delta .'_'. $button_id);
  }
  
  //add the logo
  if ($logo = variable_get('paypal_donate_logo_'. $delta, '')) {
    $output .= '<div class="payment-logo"><img src="'. check_plain($logo) .'" /></div>'."\n";
  }
  return $output;
}

/**
 * Return the buttons for a given paypal block
 *
 * @param int $delta
 * @param int $button_id
 *   Optional id of the button, this will return the amount of said button
 *
 * @return array or int
 */
function _paypal_donate_get_button_amounts($delta, $button_id = NULL) {
  preg_match_all('/[\d\?]+/', variable_get('paypal_donate_buttons_'. $delta, NULL), $found);
  if ($button_id !== NULL && isset($found[0][$button_id])) {
    return $found[0][$button_id];
  }
  return $found[0];
}

/**
 * Implementation of hook_forms()
 */
function paypal_donate_forms($form_id, $args) {
  for ($delta = 1; $delta <= (int)variable_get('paypal_donate_total_blocks', 1); ++$delta) {
    for ($button_id = 0; $button_id < count(_paypal_donate_get_button_amounts($delta)); ++$button_id) {
      $forms['paypal_donate_paypal_form_'. $delta .'_'. $button_id] = array(
        'callback' => 'paypal_donate_paypal_form',
        'callback arguments' => array($delta, $button_id),
      );
    }
  }
  return $forms;
}



function paypal_donate_paypal_form($form_state, $delta, $button_id) {
  $amount = _paypal_donate_get_button_amounts($delta, $button_id);
  $form = array();
    
  //Decide if this is a user input amount
  $blank_amount = FALSE;
  if ($amount == '?') {
    $blank_amount = TRUE;
  }
  
  //build the hidden values
  $form['#attributes'] = array(
    'class' => 'paypal-donate'. ( $blank_amount ? ' blank-amount' : '' ),
    'target' => (int)variable_get('paypal_donate_new_window_'. $delta, 1) ? '_blank' : '',
  );
  $form['#action'] = 'https://www.paypal.com/cgi-bin/webscr';
  $form['#method'] = 'post';
  $form['cmd'] = array('#type' => 'hidden', '#value' => '_donations');
  $form['business'] = array('#type' => 'hidden', '#value' => variable_get('paypal_donate_paypal_account_'. $delta, ''));
  $form['lc'] = array('#type' => 'hidden', '#value' => 'US');
  $form['item_name'] = array('#type' => 'hidden', '#value' => variable_get('paypal_donate_product_'. $delta, ''));
  $form['item_number'] = array('#type' => 'hidden', '#value' => 1);
  $form['no_shipping'] = array('#type' => 'hidden', '#value' => 1);
  $form['currency_code'] = array('#type' => 'hidden', '#value' => 'USD');
  
  //alert user if return url doesn't exist
  $return_url = variable_get('paypal_donate_return_url_'. $delta, '');
  if ($return_url && !menu_get_item(drupal_get_normal_path($return_url))) {
    drupal_set_message(t('The PayPal Donate return URL (!url) does not exist; please create this page or alter your PayPal Donate settings.', array(
      '!url' => $return_url,
    )), 'error', FALSE);    
  }
  $form['cancel_return'] = array('#type' => 'hidden', '#value' => $return_url);

  //this will be true if we're printing the value outside the buttons (to the left)
  $outside = variable_get('paypal_donate_amount_location_'. $delta, 'face') != 'face';
  
  /**
   * This is for a set amount
   */
  if (!$blank_amount) {
    $title = '$'. number_format($amount, 0, '.', ',');
    $form['amount'] = array('#type' => 'hidden', '#value' => $amount);
    $form['submit'] = array(
      '#type' => 'submit',
      '#prefix' => $outside ? '<label>'. $title .'</label>' : '',
      '#value' => $outside ? '' : $title,
      '#attributes' => array(
        'class' => 'set-value',
      ),
    );
  }
  
  /**
   * This is for a user input amount
   */
  else {
    $form['amount'] = array(
      '#type' => 'textfield',
      '#default_value' => 'default value',
      '#size' => 3,
      '#default_value' => NULL,
      '#attributes' => array(
        'class' => 'user-value',
      ),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $outside ? '' : strip_tags(variable_get('paypal_donate_button_face_'. $delta, t('Go'))),
    );
  }
  return $form;
}

/**
 * Force a paypal donation
 *
 * Use the following url to open a paypal donate window, as if the user had
   clicked a form: paypal-donate/donate/[block delta]/[amount]
 *
 * @param int $delta
 *   Refers the to the block delta for this product being forced
 * @param float $amount
 *   The amount to force; you can leave this empty and Paypal will ask for an amount
 *
 * @return NULL
 */
function paypal_donate_paypal_force($delta, $amount = 0) {
 
  //check to make sure we have a product
  if (!variable_get('paypal_donate_product_'. $delta, '')) {
    return FALSE;
  }

  $path = 'https://www.paypal.com/cgi-bin/webscr';
  
  $query = array(
    'cmd' => '_donations',
    'business' => variable_get('paypal_donate_paypal_account_'. $delta, ''),
    'lc' => 'US',
    'item_name' => variable_get('paypal_donate_product_'. $delta, ''),
    'item_number' => 1,
    'no_shipping' => 1,
    'currency_code' => 'USD',
    'cancel_return' => variable_get('paypal_donate_return_url_'. $delta, ''),
    'amount' => $amount,
  );
  drupal_goto($path, drupal_query_string_encode($query));
}